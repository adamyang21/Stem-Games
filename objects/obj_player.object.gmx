<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_run</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grav = 300;

hsp = 0;
vsp = 0;

maxVspeed = 3000;

jumpspeed = 120;
movespeed = 100;

dash = 0;
dashMultiplier = 10;
dashing = 0;
dashed = 0;

timeDoublePress = room_speed * 0.25;
timeDashDuration = room_speed * 0.2;
timeDashCooldown = room_speed * 0.75;

hsp_thisframe = 0;
vsp_thisframe = 0;

//leggo time bois
instance_create(x, y, cont_view);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dashed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dashing = 0;
global.shakeOn = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Turn the dash off and make this more elegant like what the fuck.
dash = 0;
show_debug_message("It's off");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>key_right = keyboard_check(vk_right);
key_left = keyboard_check(vk_left);

key_rightPressed = keyboard_check_pressed(vk_right);
key_leftPressed = keyboard_check_pressed(vk_left);

key_jump = keyboard_check_pressed(vk_space);

var seconds_passed = delta_time/1000000

//if not in a dash then move normally
if(!dashing)
{
    move = key_right - key_left;
    hsp = move * movespeed;
}

//dash if not dashing and has double clicked
if ((key_leftPressed || key_rightPressed ) &amp;&amp; dash &amp;&amp; !dashing &amp;&amp; !dashed)
{
    dash = 0;
    alarm[0] = 0;
    
    alarm[1] = timeDashDuration;
    dashing = 1;
    hsp = (key_rightPressed - key_leftPressed) * movespeed * dashMultiplier;

    dashed = 1;
    alarm[2] = timeDashCooldown;
}

//React to gate opening
if (key_leftPressed || key_rightPressed )
{
    dash = 1;
    alarm[0] = timeDoublePress;
}

//Keep adding gravity until it over powers you and brings you down
if (vsp &lt; maxVspeed)
{
    vsp += (grav * seconds_passed);
}

//if on ground, then allow jumping
if (place_meeting(x,y+1,obj_wall))
{
    vsp = key_jump * -jumpspeed;
}

hsp_thisframe = hsp * seconds_passed;
vsp_thisframe = vsp * seconds_passed;

if (place_meeting(x+hsp_thisframe,y,obj_wall))
{
    //move the character right next to the wall
    while(!place_meeting(x+sign(hsp_thisframe),y,obj_wall))
    {
        x += sign(hsp_thisframe);
    }
    //once player is flush, stop em from trying to go further, gravity then takes over
    hsp_thisframe = 0;
}

if (place_meeting(x,y+vsp_thisframe,obj_wall))
{
    while(!place_meeting(x,y+sign(vsp_thisframe),obj_wall))
    {
        y += sign(vsp_thisframe);
    }
    vsp_thisframe = 0;
}

show_debug_message(delta_time);

x += hsp_thisframe;
y += vsp_thisframe;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
